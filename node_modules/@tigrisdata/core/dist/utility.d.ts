import { Metadata } from "@grpc/grpc-js";
import { Session } from "./session";
import { DeleteQueryOptions, Filter, FindQueryOptions, LogicalFilter, SortOrder, ReadFields, SelectorFilter, SelectorFilterOperator, TigrisCollectionType, TigrisDataTypes, TigrisSchema, UpdateFields, UpdateQueryOptions } from "./types";
import { DeleteRequestOptions as ProtoDeleteRequestOptions, ReadRequestOptions as ProtoReadRequestOptions, SearchRequest as ProtoSearchRequest, UpdateRequestOptions as ProtoUpdateRequestOptions } from "./proto/server/v1/api_pb";
import { TigrisClientConfig } from "./tigris";
import { FacetFieldsQuery, FacetQueryOptions, SearchQuery, VectorQuery } from "./search";
import { TigrisIndexSchema } from "./search";
import { SearchIndexRequest as ProtoSearchIndexRequest } from "./proto/server/v1/search_pb";
export declare const Utility: {
    stringToUint8Array(input: string): Uint8Array;
    uint8ArrayToString(input: Uint8Array): string;
    /** @see tests for usage */
    branchNameFromEnv(given?: string): string | undefined;
    /** @see {@link branchNameFromEnv} tests for usage */
    getTemplatedVar(input: string): {
        matched: string;
        extracted: string;
    };
    /** @see tests for usage */
    nerfGitBranchName(original: string): string;
    filterToString<T>(filter: Filter<T>): string;
    _getRandomInt(upperBound: number): number;
    _selectorFilterToString<T_1 extends TigrisCollectionType>(filter: Partial<{
        op?: SelectorFilterOperator;
        fields: Partial<{
            [x: string]: unknown;
        }>;
    }>): string;
    _selectorFilterToFlatJSONObj(op: SelectorFilterOperator, fields: object): object;
    _logicalFilterToString<T_2>(filter: LogicalFilter<T_2>): string;
    _logicalFilterToJSONObj<T_3>(filter: LogicalFilter<T_3>): object;
    readFieldString(readFields: ReadFields): string;
    updateFieldsString<T_4>(updateFields: UpdateFields<T_4>): string;
    objToJsonString(obj: object): string;
    /**
     * Tigris uses custom deserialization to support `bigint`. By default the `bigint` from JSON
     * string will be converted back to model object as a `string` field. If user wants to
     * convert it back to `bigint`, the client config has to have `supportBigInt` set to `true`.
     *
     * Javascript's native way of ser/de (JSON.stringify(), JSON.parse()) doesn't support bigint
     * yet. If the model object used in other parts of the application that depends on native
     * JSON serde mechanism - you might want to continue using it as `string`.
     *
     *
     * @param json - string representation of JSON object
     * @param config - Tigris client config instance
     */
    jsonStringToObj<T_5>(json: string, config: TigrisClientConfig): T_5;
    _isISODateRegex(value: string): boolean;
    txToMetadata(tx: Session): Metadata;
    _flattenObj(ob: object): object;
    _indexSchematoJSON<T_6>(indexName: string, schema: TigrisIndexSchema<T_6>): string;
    _collectionSchematoJSON<T_7>(collectionName: string, schema: TigrisSchema<T_7>): string;
    _postProcessDocumentSchema(result: object, pkeyMap: object): object;
    _getSchemaProperties<T_8>(schema: TigrisSchema<T_8> | TigrisIndexSchema<T_8>, pkeyMap: object, keyMap: object): object;
    _readRequestOptionsToProtoReadRequestOptions(input: FindQueryOptions): ProtoReadRequestOptions;
    _deleteRequestOptionsToProtoDeleteRequestOptions(input: DeleteQueryOptions): ProtoDeleteRequestOptions;
    _updateRequestOptionsToProtoUpdateRequestOptions(input: UpdateQueryOptions): ProtoUpdateRequestOptions;
    _getArrayBlock(arraySchema: TigrisSchema<unknown> | TigrisDataTypes, pkeyMap: object, keyMap: object): object;
    _getType(fieldType: TigrisDataTypes): string;
    _getFormat(fieldType: TigrisDataTypes): string;
    _readTestDataFile(path: string): string;
    _base64Encode(input: string): string;
    _base64Decode(b64String: string): string;
    _base64DecodeToObject(b64String: string, config: TigrisClientConfig): object;
    defaultFacetingOptions(options?: Partial<FacetQueryOptions>): FacetQueryOptions;
    facetQueryToString(facets: FacetFieldsQuery): string;
    _vectorQueryToString(q: VectorQuery): string;
    _sortOrderingToString(ordering: SortOrder): string;
    protoSearchRequestFromQuery<T_9>(query: SearchQuery<T_9>, searchRequest: ProtoSearchRequest | ProtoSearchIndexRequest, page?: number): void;
};
